//===== rAthena Script =======================================
//= Mestre de Classe
//===== Descrição: ==========================================
//= Um trocador de classe totalmente funcional.
//= TRADUZIDO POR Typer.me/@Systemic404
//===== Comentários Adicionais: =============================
//= 1.0 Script inicial. [Euphy]
//= 1.1 Corrigido reset na mudança de classe Baby.
//= 1.2 Adicionado suporte ao Super Aprendiz Expandido e suporte inicial ao Kagerou/Oboro.
//= 1.3 Kagerou/Oboro adicionados.
//= 1.4 Renegado adicionado.
//= 1.5 Adicionada opção para desativar a Classe Renascimento. [mazvi]
//= 1.6 Adicionada opção para obter equipamentos relacionados à classe ao mudar. [Braniff]
//= 1.7 Mudanças de legibilidade. Também adicionadas classes BabyExpandido e BabySummoner. [Jey]
//= 1.8 Adicionada opção para desativar apenas Noviço Baby, mas a Classe Baby pode ser habilitada [mazvi]
//= 1.9 Migrado/Integrado para Funções Globais de Habilidades Platinum. [mazvi]
//= 2.0 Adicionada 4ª classe [Lemongrass]
//============================================================

prontera,153,193,6	script	Job Master	123,{
function Get_Job_Equip;
// Verifica se o Jogador tem o nível necessário.
// fecha se não, retorna se sim
function Require_Level {
	if (BaseLevel < getarg(0) || JobLevel < getarg(1)) {
		.@blvl = getarg(0) - BaseLevel;
		.@jlvl = getarg(1) - JobLevel;
		mes "Requisito de nível:";
		mes ((getarg(0)>1)? 
			"^bb0000"+getarg(0)+"^000000 (^bb0000Base^000000) / ":"")+"^00bb00"+
			getarg(1)+"^000000 (^00bb00Classe^000000)";
		mes "Você precisa de " +
			((.@blvl > 0) ? "^bb0000"+.@blvl+"^000000 níveis base a mais " + 
				((.@jlvl > 0) ? "e " : "") : "") +
			((.@jlvl > 0) ? "^00bb00"+.@jlvl+"^000000 níveis de classe a mais " : "") +
			"para continuar.";
		close;
	}
	return;
}

// Verifica se a classe fornecida é uma classe Baby
function Is_Baby {
	return ((getarg(0, eaclass())&EAJL_BABY)>0);
}

// Verifica se o jogador pode mudar para a quarta classe.
// Nota: Isso não inclui as verificações de nível.
function Can_Change_Fourth {
	// Para mudar para a quarta classe você precisa ser:
	// * Terceira Classe Transcendente
	if( !.FourthClass )
		return false; // Mudança para quarta classe desativada
	if( (eaclass()&(EAJL_THIRD|EAJL_UPPER)) != (EAJL_THIRD|EAJL_UPPER) )
		return false; // Não é Terceira Classe Transcendente
	if( eaclass()&EAJL_FOURTH )
		return false; // Já é Quarta Classe
	if( roclass(eaclass()|EAJL_FOURTH) < 0 )
		return false; // Classe não tem Quarta Classe
	return true;
}

// Verifica se o jogador pode mudar para a terceira classe.
// Nota: Isso não inclui as verificações de nível.
function Can_Change_Third {
	// Para mudar para a terceira classe você precisa ser:
	// * Segunda Classe
	// * Segunda Classe Transcendente
	// * Segunda Classe Baby
	if( !.ThirdClass )
		return false; // Mudança para terceira classe desativada
	if( !(eaclass()&EAJL_2) )
		return false; // Não é Segunda Classe
	if( eaclass()&EAJL_THIRD )
		return false; // Já é Terceira Classe
	if( roclass(eaclass()|EAJL_THIRD) < 0 )
		return false; // Classe não tem Terceira Classe
	if( (eaclass()&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE )
		return false; // Super Aprendiz Expandido é equivalente à Terceira Classe, mas tem seu próprio caso
	if( Is_Baby() && (!.BabyClass || !.BabyThird) )
		return false; // Mudança de Baby (Terceira) não permitida
	return true;
}


function	Can_Rebirth	{
	// Para renascer, você precisa ser:
	// * Segunda Classe
	if( !.RebirthClass )
		return false; // Renascer desativado
	if( !(eaclass()&EAJL_2) )
		return false; // Não é Segunda Classe
	if( eaclass()&(EAJL_UPPER|EAJL_THIRD) )
		return false; // Já Renasceu/Terceira Classe
	if( roclass(eaclass()|EAJL_UPPER) < 0 )
		return false; // Classe não tem classe transcendida
	if( Is_Baby() && !.BabyClass )
		return false; // Mudanças de Baby não permitidas
	return true;
}

// Verifica se a classe fornecida é uma primeira classe
function	Is_First_Cls	{
	return (getarg(0) <= EAJ_TAEKWON);
}

function	Check_Riding	{
	// Nota: Por que sempre devemos verificar Montaria:
	// Montarias são consideradas como outra classe, o que
	// tornaria este NPC maior apenas para lidar com
	// esses casos especiais.
	if (checkfalcon() || checkcart() || checkriding() || ismounting()) {
		mes "Por favor, remova seu " +
			((checkfalcon()) ? "falcão" : "") +
			((checkcart()) ? "carrinho" : "") +
			((checkriding()) ? "Peco" : "") +
			((ismounting()) ? "montaria" : "") +
			" antes de prosseguir.";
		close;
	}
	return;
}

function	Check_SkillPoints	{
	if (.SkillPointCheck && SkillPoint) {
		mes "Por favor, use todos os seus pontos de habilidade antes de prosseguir.";
		close;
	}
	return;
}

// addJobOptions é essencialmente o mesmo que
// setarray .@array[getarraysize(.@array)],opt1,opt2,...;
// É apenas mais fácil de ler, já que estamos usando isso com muita frequência
function	Job_Options	{
	.@argcount = getargcount();
	.@arr_size = getarraysize(getarg(0));
	for( .@i = 1; .@i < .@argcount; .@i++) {
		setarray getelementofarray(getarg(0), .@arr_size++),getarg(.@i);
	}
}

// Início do NPC
	mes .NPCName$;
	Check_Riding();
	Check_SkillPoints();

	// inicialização
	.@eac = eaclass();
	.@fourth_possible = Can_Change_Fourth();
	.@third_possible = Can_Change_Third();
	.@rebirth_possible = Can_Rebirth();
	.@first_eac = .@eac&EAJ_BASEMASK;
	.@second_eac = .@eac&EAJ_UPPERMASK;
	// Nota: Estes já estão definidos em pc.cpp
	// BaseClass = roclass(.@eac&EAJ_BASEMASK) que é a Primeira Classe do jogador
	// BaseJob = roclass(.@eac&EAJ_UPPERMASK) que é a Segunda Classe do jogador
	//dispbottom "Debug: eac ("+.@eac+"), third ("+.@third_possible+"), rebirth("+.@rebirth_possible+"), BaseClass ("+BaseClass+"), BaseJob ("+BaseJob+")";
		
	// A partir daqui, o mestre de empregos verifica a classe atual
	// e preenche o array `.@job_opt` com as opções de
	// emprego possíveis para o jogador.
	
	if( .@rebirth_possible ) {
		// Opção de renascimento (exibida no topo do menu)
		Require_Level(.Req_Rebirth[0], .Req_Rebirth[1]);
		Job_Options(.@job_opt, Job_Novice_High);
	}
	if( .@third_possible ) {
		// Mudança para Terceira Classe (exibida abaixo do renascimento)
		Require_Level(.Req_Third[0], .Req_Third[1]);
		Job_Options(.@job_opt, roclass(.@eac|EAJL_THIRD));
	}
	if( .@fourth_possible ) {
		// Mudança para Quarta Classe (exibida abaixo do renascimento)
		Require_Level(.Req_Fourth[0], .Req_Fourth[1]);
		Job_Options(.@job_opt, roclass(.@eac|EAJL_FOURTH));
	}
	 
	if (.SecondExpanded && 
	   (.@eac&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE && // é Super Novice
	   !(eaclass()&EAJL_THIRD) ) {				 	// ainda não é Expanded SN
		// (Baby) Super Novice para Expanded (Baby) Super Novice
	   	if( !Is_Baby(.@eac) || (.BabyClass && .BabyExpanded) ) {
			// .BabyClass & .BabyExpanded devem estar ativados se for um baby
			Require_Level(.Req_Exp_SNOVI[0], .Req_Exp_SNOVI[1]);
			Job_Options(.@job_opt, roclass(.@eac|EAJL_THIRD)); // Expanded SN é "third" cls
		}
	}

	// bebês não podem se tornar quarta classe
	if (.FourthExpanded && .@eac == EAJ_REBELLION) {
		Require_Level(.Req_Fourth[0], .Req_Fourth[1]);
		Job_Options(.@job_opt, roclass(EAJ_NIGHT_WATCH));
	}

	if (.FourthExpanded && .@eac == EAJ_KAGEROUOBORO) {
		Require_Level(.Req_Fourth[0], .Req_Fourth[1]);
		Job_Options(.@job_opt, roclass(EAJ_SHINKIRO_SHIRANUI));
	}

	if (.FourthExpanded && .@eac == EAJ_SUPER_NOVICE_E) {
		Require_Level(.Req_Fourth[0], .Req_Fourth[1]);
		Job_Options(.@job_opt, roclass(EAJ_HYPER_NOVICE));
	}
	
	if (.FourthExpanded && .@eac == EAJ_SUMMONER) {
		Require_Level(.Req_SHandler[0], .Req_SHandler[1]);
		Job_Options(.@job_opt, roclass(EAJ_SPIRIT_HANDLER));
	}

	if (.SecondExpanded && 
		((.@eac&(~EAJL_BABY)) == EAJ_NINJA || 		// é (Baby) Ninja
		(.@eac&(~EAJL_BABY)) == EAJ_GUNSLINGER)) {	// é (Baby) Gunslinger
		// (Baby) Ninja para (Baby) Kagerou / Oboro
		// (Baby) Gunslinger para (Baby) Rebellion
		if( !Is_Baby(.@eac) || (.BabyClass && .BabyExpanded) ) {
			// .BabyClass & .BabyExpanded devem estar ativados se for um baby
			Require_Level(.Req_Exp_NJ_GS[0], .Req_Exp_NJ_GS[1]);
			// Kagerou, Oboro, Rebellion são considerados como uma classe 2-1
			Job_Options(.@job_opt, roclass(.@eac|EAJL_2_1));
		}
	}
	
	// O jogador é Job_Novice, Job_Novice_High ou Job_Baby
	if (.@first_eac == EAJ_NOVICE && .@second_eac != EAJ_SUPER_NOVICE) {
		// MAPID_NOVICE, MAPID_SUPER_NOVICE, MAPID_NOVICE_HIGH, MAPID_BABY
		Require_Level(.Req_First[0], .Req_First[1]);
		switch(Class) {
			case Job_Novice:
				// Primeira mudança de emprego
				Job_Options(.@job_opt, Job_Swordman,
					Job_Mage, Job_Archer, Job_Acolyte, Job_Merchant, Job_Thief,
					Job_Super_Novice, Job_Taekwon, Job_Gunslinger, Job_Ninja);
				if( .BabyNovice )
					Job_Options(.@job_opt, Job_Baby);
				break;
			case Job_Novice_High:
				// Mudança de emprego após renascimento
				if( .LastJob && lastJob )
					Job_Options(.@job_opt,
						roclass((eaclass(lastJob)&EAJ_BASEMASK)|EAJL_UPPER));
				else
					Job_Options(.@job_opt, 
						Job_Swordman_High, Job_Mage_High, Job_Archer_High,
						Job_Acolyte_High, Job_Merchant_High, Job_Thief_High);
				break;
			case Job_Baby:
				if( !.BabyClass )
					break;
				// Primeira mudança de emprego como um bebê
				Job_Options(.@job_opt, Job_Baby_Swordman, Job_Baby_Mage,
					Job_Baby_Archer,Job_Baby_Acolyte, Job_Baby_Merchant,
					Job_Baby_Thief);
				if( .BabyExpanded )
					Job_Options(.@job_opt, Job_Super_Baby, Job_Baby_Taekwon,
						Job_Baby_Gunslinger, Job_Baby_Ninja);
				if( .BabySummoner )
					Job_Options(.@job_opt, Job_Baby_Summoner);
				break;
			default:
				mes "Ocorreu um erro.";
				close;
		}
	} else if( Is_First_Cls(.@eac) || 				// Primeira Classe
			   Is_First_Cls(.@eac&(~EAJL_UPPER)) ||	// Trans. Primeira Classe
			   (.BabyClass && Is_First_Cls(.@eac&(~EAJL_BABY))) ) {	// Baby Primeira Classe
		// O jogador é Primeira Classe (não Novice)
		// a maioria dos empregos deve ter duas opções aqui (2-1 e 2-2)
		.@class1 = roclass(.@eac|EAJL_2_1); // 2-1
		.@class2 = roclass(.@eac|EAJL_2_2); // 2-2
		// dispbottom "Debug: Classes: class1 ("+.@class1+"), class2 ("+.@class2+")";
		if(.LastJob && lastJob && (.@eac&EAJL_UPPER)) {
			// O jogador é classe renascida e mudanças de classe linear são aplicadas
			Require_Level(.Req_Second[0], .Req_Second[1]);
			Job_Options(.@job_opt, lastJob + Job_Novice_High);
		} else {
			// Classe não é imposta, o jogador pode decidir.
			if( .@class1 > 0 ) { // 2-1
				Require_Level(.Req_Second[0], .Req_Second[1]);
				Job_Options(.@job_opt, .@class1);
			}
			if( .@class2 > 0 ) { // 2-2
				Require_Level(.Req_Second[0], .Req_Second[1]);
				Job_Options(.@job_opt, .@class2);
			}
		}
	}
	
	// Exibindo o Menu de Empregos definido por .@job_opt.
	// .@job_opt não deve ser alterado abaixo desta linha.
	function Job_Menu;
	Job_Menu(.@job_opt);
	close;

// Exibe o menu de empregos
function	Job_Menu	{
	// getarg(0) é o array .@job_opt que contém todas as mudanças de emprego disponíveis.
	function Confirm_Change;
	while(true) {
		.@opt_cnt =  getarraysize(getarg(0));
		if( .@opt_cnt <= 0 ) {
			mes "Nenhum outro emprego está disponível.";
			close;
		}

		.@selected = 0; // Apenas uma única classe de emprego dada, não é necessário selecionar
		if (.@opt_cnt > 1) {
			// Múltiplas classes de emprego dadas. Selecione uma e salve em .@class
			// Após isso, confirme .@class
			mes "Selecione um emprego.";
			.@menu$ = "";
			for (.@i = 0; .@i < .@opt_cnt; .@i++) {
				if( getelementofarray(getarg(0), .@i) == Job_Novice_High)
					.@jobname$ = "^0055FFRebirth^000000";
				else
					.@jobname$ = jobname(getelementofarray(getarg(0), .@i));
				.@menu$ = .@menu$ + " ~ " + .@jobname$ + ":";
			}
			.@menu$ = .@menu$+" ~ ^777777Cancelar^000000";
			.@selected = select(.@menu$) - 1;
			if( .@selected < 0 || .@selected >= .@opt_cnt )
				close;
			next;
			mes .NPCName$;
		}
		.@class = getelementofarray(getarg(0), .@selected);
		if ((.@class == Job_Super_Novice || .@class == Job_Super_Baby) &&
				BaseLevel < .SNovice) {
			// Requisito especial de nível porque Super Novice e
			// Super Baby podem ser selecionados em uma das primeiras mudanças de classe.
			// Por isso, o requisito de nível é depois e não antes
			// da seleção.
			mes "Um nível base de " + .SNovice +
				" é necessário para se transformar em " + jobname(.@class) + ".";
			return;
		}
		// Confirme a Classe
		Confirm_Change(.@class, .@opt_cnt > 1);
		next;
		mes .NPCName$;
	}
	return;
}


// Executa a mudança de emprego real e fecha.
function	Job_Change	{
	.@previous_class = Class;
	.@to_cls = getarg(0);
	next;
	mes .NPCName$;
	mes "Você agora é " + callfunc("F_InsertArticle", jobname(.@to_cls)) + "!";
	if (.@to_cls == Job_Novice_High && .LastJob)
		lastJob = Class; // Salva o último emprego para renascimento
	jobchange .@to_cls;
	if (.@to_cls == Job_Novice_High)
		resetlvl(1);
	else if (.@to_cls == Job_Baby) {
		resetstatus;
		resetskill;
		set SkillPoint,0;
	}
	specialeffect2 EF_ANGEL2;
	specialeffect2 EF_ELECTRIC;
	if (.@previous_class != Class) {
		if (.Platinum)
			callfunc "F_GetPlatinumSkills";
		if (.GetJobEquip)
			Get_Job_Equip();
	}
	close; // Sempre fecha após a mudança
}

function	Confirm_Change	{
	// O jogador confirma que quer mudar para .@class
	.@class = getarg(0, -1);
	.@back = getarg(1, false);
	if( .@class < 0 || eaclass(.@class) == -1 ) {
		mes "Erro de Classe Desconhecida.";
		close;
	}
	mes "Você quer mudar para a classe ^0055FF" + jobname(.@class) + "^000000?";
	.@job_option$ = " ~ Mudar para a classe ^0055FF" + jobname(.@class) + "^000000";
	if( .@class == Job_Novice_High)
		.@job_option$ = " ~ ^0055FFRenascimento^000000";
	
	if (select(.@job_option$ + ": ~ ^777777" + 
			((.@back) ? "Voltar" : "Cancelar") + "^000000") == 1) {
		Job_Change(.@class);
	}
	if (!.@back)
		close; // "Cancelar" pressionado
	return;
}

// Função que dá um item relacionado ao emprego ao jogador
// os itens são as recompensas das missões originais de mudança de emprego
function	Get_Job_Equip	{
	// Nota: O item é dropado se o jogador não puder segurá-lo.
	// Mas isso é melhor do que não dar o item.
	.@eac = eaclass();
	if( .@eac&EAJL_FOURTH ) {
		// Itens de Quarta Classe
		getitem 490087,1; // Colar de Ampulheta
	} else if( .@eac&EAJL_THIRD ) {
		// Itens de Terceira Classe
		getitem 2795,1;	// Anel de Maçã Verde para todas as Terceiras Classes
		switch(BaseJob) {
			// BaseJob da Terceira Classe
			// Para Terceiras Classes Normais, Bebê e Transcendentes
			case Job_Knight:
				getitem 5746,1;	break;	// Elmo de Rune [1]
			case Job_Wizard:
				getitem 5753,1;	break;	// Chapéu de Pedra Mágica [1]
			case Job_Hunter:
				getitem 5748,1;	break;	// Óculos de Sniper [1]
			case Job_Priest:
				getitem 5747,1;	break;	// Mitra [1]
			case Job_Blacksmith:
				getitem 5749,1;	break;	// Faixa de Motorista [1]
			case Job_Assassin:
				getitem 5755,1;	break;	// Executor Silencioso [1]
			case Job_Crusader:
				getitem 5757,1;	break;	// Elmo de Dip Schmidt [1]
			case Job_Sage:
				getitem 5756,1;	break;	// Sussurro do Vento [1]
			case Job_Bard:
				getitem 5751,1;	break;	// Chapéu da Canção do Maestro [1]
			case Job_Dancer:
				getitem 5758,1;	break;	// Cisne Moribundo [1]
			case Job_Monk:
				getitem 5754,1;	break;	// Alma Flamejante [1]
			case Job_Alchemist:
				getitem 5752,1;	break;	// Sussurro de Midas [1]
			case Job_Rogue:
				getitem 5750,1; 		// Artesanato Sombrio [1]
				getitem 6121,1;			// Pincel de Maquiagem
				getitem 6122,1;	break;	// Pincel de Pintura
		}
	} else if (.@eac&EAJL_2) {
		// Segunda Classe (E não Terceira Classe)
		switch(BaseJob) {
			// Segunda Classe
			case Job_Knight:
				getitem 1163,1;	break;	// Claymore [0]
			case Job_Priest:
				getitem 1522,1;	break;	// Stunner [0]
			case Job_Wizard:
				getitem 1617,1;	break;	// Cajado de Sobrevivente [0]
			case Job_Blacksmith:
				getitem 1360,1;	break;	// Machado de Duas Mãos [1]
			case Job_Hunter:
				getitem 1718,1;	break;	// Arco de Caçador [0]
			case Job_Assassin:
				getitem 1254,1;	break;	// Jamadhar [0]
			case Job_Crusader:
				getitem 1410,1;	break;	// Lança [0]
			case Job_Monk:
				getitem 1807,1;	break;	// Punho [0]
			case Job_Sage:
				getitem 1550,1;	break;	// Livro [3]
			case Job_Rogue:
				getitem 1222,1;	break;	// Damascus [1]
			case Job_Alchemist:
				getitem 1126,1;	break;	// Sabre [2]
			case Job_Bard:
				getitem 1907,1;	break;	// Guitarra [0]
			case Job_Dancer:
				getitem 1960,1;	break;	// Chicote [1]
			case Job_Super_Novice:
				getitem 1208,1;	break;	// Main Gauche [4]
			case Job_Star_Gladiator:
				getitem 1550,1;	break;	// Livro [3]
			case Job_Soul_Linker:
				getitem 1617,1;	break;	// Cajado de Sobrevivente [0]
		}
	} else {
		// Nem Segunda nem Terceira Classe
		// => Primeira Classe ou não coberta pelo switch
		switch(BaseClass) {
			// Primeira Classe
			case Job_Swordman:
				getitem 1108,1;	break;	// Lâmina [4]
			case Job_Mage:
				getitem 1602,1;	break;	// Cajado [4]
			case Job_Archer:
				getitem 1705,1;	break;	// Arco Composto [4]
			case Job_Acolyte:
				getitem 1505,1;	break;	// Maça [4]
			case Job_Merchant:
				getitem 1302,1;	break;	// Machado [4]
			case Job_Thief:
				getitem 1208,1;	break;	// Main Gauche [4]
			case Job_Gunslinger:
				getitem 13101,1; break;	// Seis Tiros [2]
			case Job_Ninja:
				getitem 13010,1; break;	// Asura [2]
		}
	}
	return;
}


OnInit:
	// Inicialização, não edite estas variáveis
	.NPCName$ = "[Mestre de Empregos]";
	
	// Configurações
	.FourthClass = true;				// Habilitar classes de quarta classe?
	.FourthExpanded = true;				// Habilitar novas classes expandidas de quarta classe: Ex. Hiper Noviço, Rebellion, Shinkiro/Shiranui?
	.ThirdClass = true;					// Habilitar classes de terceira classe?
	.RebirthClass = true;				// Habilitar classes renascidas?
	.SecondExpanded = true;				// Habilitar novas classes expandidas de segunda classe: Ex. Super Noviço, Kagerou/Oboro, Rebellion?
	.BabyNovice = true;					// Habilitar classes de bebê noviço? Desabilite se quiser que o jogador precise ter pais para obter a classe bebê.
	.BabyClass = true;					// Habilitar classes de bebê?
	.BabyThird = true;					// Habilitar classes de terceira classe para bebê?
	.BabyExpanded = true;				// Habilitar classes expandidas de bebê: Ex. Bebê Ninja, Bebê Taekwon, etc.
	.BabySummoner = true;				// Habilitar Bebê Invocador?
	.LastJob = true;					// Aplicar mudanças de classe lineares?
	.SkillPointCheck = true;			// Forçar o jogador a usar todos os pontos de habilidade?
	.Platinum = true;					// Obter habilidades de platina automaticamente?
	.GetJobEquip = false;				// Obter equipamento de emprego (principalmente armas) na mudança de emprego?

	// Requisitos de Nível
	setarray .Req_First[0],1,10; 		// Nível base mínimo, nível de emprego para mudar para a primeira classe
	setarray .Req_Second[0],1,40; 		// Nível base mínimo, nível de emprego para mudar para a segunda classe
	setarray .Req_Rebirth[0],99,50;		// Nível base mínimo, nível de emprego para renascer
	setarray .Req_Third[0],99,50;		// Nível base mínimo, nível de emprego para mudar para a terceira classe
	setarray .Req_Fourth[0],200,70;		// Nível base mínimo, nível de emprego para mudar para a quarta classe
	setarray .Req_Exp_NJ_GS[0],99,70; 	// Nível base mínimo, nível de emprego para mudar para Ninja Expandido e Pistoleiro
	setarray .Req_Exp_SNOVI[0],99,99; 	// Nível base mínimo, nível de emprego para mudar para Super Noviço Expandido
	setarray .Req_SHandler[0],200,60;	// Nível base mínimo, nível de emprego para mudar para Manipulador de Espíritos
	.SNovice = 45;						// Nível base mínimo para mudar para Super Noviço
	
	// Ajustes de configuração por PACKETVER
	if( PACKETVER < 20161207 ) {
		if( .BabyExpanded )
			debugmes "jobmaster: BabyExpanded desativado devido a PACKETVER desatualizado.";
		if( .BabySummoner )
			debugmes "jobmaster: BabySummoner desativado devido a PACKETVER desatualizado.";
		.BabyExpanded = false;
		.BabySummoner = false;
	}
	end;
}
